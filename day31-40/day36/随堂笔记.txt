1.打印名片案例
2.bom对象:浏览器对象
	window.document   存储的当前页面 所有的标签
	window.frames        就是window对象 存储的就是一些 对象和方法
	window.navigator    浏览器的配置信息
	window.screen        屏幕的宽高信息
	
	****************************************************
	window.localtion  操作地址栏的
	window.localtion.href  属性  可以赋值一个新的地址 实现页面的跳转
	window.localtion.assign("页面的路径")  实现页面的跳转
	window.localtion.replace("页面的路径")  实现页面的跳转 直接覆盖没有历史记录
	window.localtion.reload()   重新加载当前页
	
	****************************************************
	window.history  操作历史记录的
	window.history.back()  回到上一条历史记录
	window.history.forward()  前进到下一条历史记录
	window.history.go()   前进或者后退到 指定历史纪录(以当前页进行参照)
		例如：
		window.history.go(整数)        -2 -1  0  1  2   0表示当前页  负数后退  正数前进
		
	****************************************************
	window.open(新页面,打开方式)    打开一个新的页面
	window.close()     关闭当前页
	
	****************************************************
	window.onload  事件 ：页面结构加载完成  才会触发事件 执行内部代码
	
	实际意义：我们可以把 script的 代码 写在 head里面了 
	
	****************************************************
	案例:点击按钮 显示或者因此 div的案例
	
	1.布局：div 和 按钮  ====》 div实体化:display:none    让盒子暂时隐藏
	2.写Js代码：
		1.都写在 head里面 ：加上window.onload  
		2.代码逻辑：
			>获取2个对象
			>给按钮 对象 绑定事件
			>定义一个标记:使用之后 马上变更 用于判断
			>如果为true 说明隐藏了  那么做显示 变更标记为false
			>如果为false 说明显示了  那么做隐藏 变更标记为true
			
	
	****************************************************	
	定时器:
	单次定时:setTimeOut()
	多次定时:setInterval()
	参数1:函数名 或者 匿名函数
	参数2:毫秒值
	
	清空定时器
	clearTimeOut(定时器的名字)
	clearInterval(定时器的名字)
			
3.dom对象:document.get....
	获取元素节点：
		通过id:getElementById()
		通过class:getElementsByClassName()   获取的不是一个dom对象  是一个存储dom的容器
		通过name:getElementsByName()   获取的不是一个dom对象  是一个存储dom的容器
		通过标签:getElementsByTagName()   获取的不是一个dom对象  是一个存储dom的容器
		
		
	获取属性节点：
		官方属性：
			对象.属性名=新的值
		自定义属性：
			值=对象.getAttribute("属性名")  获取
			
			对象.setAttribute("属性名","新值")  设置:属性名 存在 就修改 不存在 就添加
			
	获取文本节点：
		对象.innerHTML =值    拿标签内部完整结构,重新赋值 就是把原有的值 覆盖掉
		对象.innerText =值       拿标签内部所有的值,重新赋值 就是把原有的值 覆盖掉
		
	获取css属性:
		修改:
		对象.style.属性名 = 值
		获取:
		window.getComputedStyle(元素,null).属性
		
		
************************************************************
按钮的排他:
	1.循环内部 如果有事件 :事件 拿到循环的变量 永远是 循环结束之后的值
	2.this :当前触发事件的对象
	
	整体实现逻辑:
	1.循环绑定事件
	2.给当前按钮设置新颜色
	3.给其他按钮 颜色还原:if (其他!=this)
	
标签移动原理:
	1.明确修改left属性的值 就可以动起来
	2.不要直接获取宽 这个属性 去运算
	3.如何判断 边界 让 内部 小盒子 来回移动
	var 开始值
	var 递增数
	
	if (达到右边界){
		递增数为负
	}
	if(达到左边界){
		递增数为正
	}

************************************************************		
		

